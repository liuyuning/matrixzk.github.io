<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：oc内存管理 | Matrixzk's Blog]]></title>
  <link href="http://matrixzk.github.io/blog/categories/ocnei-cun-guan-li/atom.xml" rel="self"/>
  <link href="http://matrixzk.github.io/"/>
  <updated>2015-06-21T15:40:48+08:00</updated>
  <id>http://matrixzk.github.io/</id>
  <author>
    <name><![CDATA[matrixzk]]></name>
    <email><![CDATA[matrixzk.me@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OC内存管理那些事儿(3)：使用自动释放池块]]></title>
    <link href="http://matrixzk.github.io/blog/20141113/memory-management-3-autoreleasePool/"/>
    <updated>2014-11-13T20:00:00+08:00</updated>
    <id>http://matrixzk.github.io/blog/20141113/memory-management-3-autoreleasePool</id>
    <content type="html"><![CDATA[<p>自动释放池块提供了一种机制，通过它我们在放弃一个对象的所有权时，可以避免该对象被立即释放掉(就像从一个方法返回一个对象那样)。通常情况下不需要创建自己的自动释放池的，但有些特殊情况就必须或者说有必要这样做。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#autorelease-pool-blocks">关于自动释放池块(Autorelease Pool Blocks)</a></li>
  <li><a href="#section">使用局部自动释放池块来降低内存峰值</a></li>
  <li><a href="#section-1">自动释放池块和线程</a></li>
</ul>

<h2 id="autorelease-pool-blocks">关于自动释放池块(Autorelease Pool Blocks)</h2>

<p>使用<code>@autoreleasepool</code>来标记一个自动释放池块，例如：</p>

<p><code>objective-c
@autoreleasepool {
    // Code that creates autoreleased objects.
}
</code></p>

<p>在自动释放池块的末尾，块内所有接收过<code>autorelease</code>消息的对象都会收到一个<code>release</code>消息，这些对象之前接收过多少次<code>autorelease</code>消息，此时就会接收到相应次数的<code>release</code>消息。</p>

<p>和其他代码块一样，自动释放池块可以嵌套：</p>

<p><code>
@autoreleasepool {
    // ...
    @autoreleasepool {
        // ...
    }
    ...
}
</code></p>

<p>但一般不会像上边那么用；通常的做法是，一个源文件中的某自动释放池块内的代码，去调用另一个源文件中包含在某自动释放池块内的代码。对于某给定的<code>autorelease</code>消息，会在发送该<code>autorelease</code>消息所在的自动释放池块的末尾处发送相应的<code>release</code>消息。</p>

<p>Cocoa 总是期望代码都被执行在某个自动释放池块内，否则那些自动释放的对象( autoreleased )就不会接收到<code>release</code>消息，就会导致内存泄漏。(如果在自动释放池块外发送一个<code>autorelease</code>消息，Cocoa 会打印一条相应的错误信息日志。) AppKit 和 UIKit 框架会在一个自动释放池块内执行每个事件循环(event-loop，比如一个鼠标点击时间或者一个tap)。因此通常不需要自己创建自动释放池块，甚至连创建它们的代码都看不到。但是，<font color="red">有三种场景需要创建自己的自动释放池块</font>：</p>

<ul>
  <li>
    <p>所写的程序不是基于 UI 框架，比如一个命令行工具。</p>
  </li>
  <li>
    <p>所写的循环(loop)中创建了很多临时对象。</p>

    <p>在一个循环进入下次迭代之前，应该使用自动释放池块处理当前循环内自动释放的临时对象。在循环内使用自动释放池块有助于降低应用的内存占用峰值。</p>
  </li>
  <li>
    <p>开辟了一个二级( secondary )线程</p>

    <p>必须在该线程开始执行时就创建自己的自动释放池块，否则会导致内存泄漏。(详情参考<a href="/blog/20141113/memory-management-3-autoreleasePool/#section-1"><strong>自动释放池块和线程</strong></a>)</p>
  </li>
</ul>

<h2 id="section">使用局部自动释放池块来降低内存峰值</h2>

<p>许多程序创建的临时对象是自动释放的( autoreleased )。这些对象在程序运行到自动释放池块的结尾之前都会占据着程序的内存。在当前事件循环结束之前允许临时对象一直累积，在多数情况下不会导致过度的内存开销；但有时，创建大量的临时对象会导致内存占用大幅度升高，这时可以自己创建一个自动释放池块来及时处理下。在块的末尾，这些临时对象会被释放掉，内存占用通常也会因此而降下来。</p>

<p>下边的例子展示了如何在一个<code>for</code>循环中使用局部自动释放池块：</p>

<p>&#8220;`
NSArray *urls = &lt;# An array of file URLs #&gt;;
for (NSURL *url in urls) {</p>

<pre><code>@autoreleasepool {
    NSError *error;
    NSString *fileContents = [NSString stringWithContentsOfURL:url
                                     encoding:NSUTF8StringEncoding error:&amp;error];
    /* Process the string, creating and autoreleasing more objects. */
} } ```
</code></pre>

<p>上述<code>for</code>循环每次处理一个文件。自动释放池块中每个发出过<code>autorelease</code>消息的对象(比如 fileContents )都会在块的末尾被释放掉。</p>

<p>在自动释放池块之后，该块内的所有自动释放的对象都应该被认为是“已被释放的”。不要再给它发送消息或者将它返回给方法的调用者。如果一定要在自动释放池块外使用某临时产生的对象，可以在块内给它发送一个<code>retain</code>消息，然后在块外给它发送一个<code>autorelease</code>消息，例如：</p>

<p>&#8220;`
– (id)findMatchingObject:(id)anObject {</p>

<pre><code>id match;
while (match == nil) {
    @autoreleasepool {
 
        /* Do a search that creates a lot of temporary objects. */
        match = [self expensiveSearchForObject:anObject];
 
        if (match != nil) {
            [match retain]; /* Keep match around. */
        }
    }
}
 
return [match autorelease];   /* Let match go and return it. */ } ```
</code></pre>

<p>在自动释放池块内给<code>match</code>发送<code>retain</code>，然后在块外给其发送<code>autorelease</code>来扩展其生命周期，这样<code>match</code>就可以在循环外接收消息了，并可以将其返回给<code>findMatchingObject:</code>方法的调用者。</p>

<h2 id="section-1">自动释放池块和线程</h2>

<p>Cocoa 应用程序中的每个线程都维持一个它自己的自动释放池块<strong>栈</strong>( stack )，如果要写一个 Foundation-only 的程序，或者开辟一个新的线程，这时就需要创建自己的自动释放池块。</p>

<p>如果应用或线程的生命期很长( long-lived )，并且可能生成大量的自动释放的对象( autoreleased objects )，此时就需要使用自动释放池块(就像 AppKit 和 UIKit 在主线程中所做的那样)。否则，自动释放的对象的累积会导致内存占用持续增长。如果所开辟的线程不做涉及 Cocoa 的方法调用，就不需要使用自动释放池块了。</p>

<p><br />
<strong>注意：</strong> 如果所创建的二级线程使用<code>POSIX</code>线程 APIs 而不是<code>NSThread</code>，此时只有 Cocoa 在多线程模式下时才能使用 Cocoa。Cocoa 只有在开辟了它的第一个<code>NSThread</code>对象之后才进入多线程模式。为了在二级 POSIX 线程中使用 Cocoa，必须先至少开辟一个<code>NSThread</code>对象，它会立即退出。可以使用<code>NSThread</code>类的<code>isMultiThreaded</code>方法来检测 Cocoa 是否处于多线程模式。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC内存管理那些事儿(2)：内存管理实践]]></title>
    <link href="http://matrixzk.github.io/blog/20141111/memory-management-2-practical/"/>
    <updated>2014-11-11T20:00:51+08:00</updated>
    <id>http://matrixzk.github.io/blog/20141111/memory-management-2-practical</id>
    <content type="html"><![CDATA[<p>虽然<a href="/blog/20141109/memory-management-1-policy/"><strong>上篇文章</strong></a>中所介绍的基本概念简单明了，但仍有一些实用的套路可使内存管理更加简单，而且能帮忙确保在最大限度得减少资源需求的同时，程序依然能够可靠健壮得运行。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">使用存取器方法让内存管理变得更加简单</a>    <ul>
      <li><a href="#section-1">使用存取器方法给属性赋值</a></li>
      <li><a href="#initializer--dealloc-">不要在初始化( Initializer )方法和 dealloc 方法中使用存取器方法</a></li>
    </ul>
  </li>
  <li><a href="#section-2">使用弱引用来避免循环引用</a></li>
  <li><a href="#section-3">要避免对象在使用过程中被释放</a></li>
  <li><a href="#dealloc-">不要在 dealloc 方法中管理稀缺资源</a></li>
  <li><a href="#section-4">集合类持有它所包含对象的所有权</a></li>
  <li><a href="#section-5">所有权策略通过引用计数实现</a></li>
</ul>

<h2 id="section">使用存取器方法让内存管理变得更加简单</h2>

<p>如果类中有一个对象属性，就必须确保给该对象赋的任何值在使用的过程中都不会被释放掉。因此在给该对象赋值时就要显式得持有它。之后也必须确保释放所有当前所持有的对象。</p>

<p>这些有时看起来可能有些冗余或者形式化，但如果使用存取器方法(<code>accessor method</code>)，在管理内存的过程中出错的几率将会大大降低。如果你的代码中的实例变量到处都是<code>retain</code>和<code>release</code>操作，那几乎可以确定，你已踏上了一条不归路。</p>

<p>思考如下一个<code>Counter</code>类，它有一个<code>count</code>属性：</p>

<p><code>objective-c
@interface Counter : NSObject
@property (nonatomic, retain) NSNumber *count;
@end;
</code></p>

<p>这里的属性(<code>property</code>)声明了两个存取器方法(<code>accessor method</code>)。通常编译器能帮忙自动合成这两个方法，不过，看一下它们具体实现还是有好处的。</p>

<p>在<code>get</code>访问器中，只是返回一个合成的实例变量，所以不需要<code>retain</code>或者<code>release</code>。</p>

<p><code>
- (NSNumber *)count {
    return _count;
}
</code></p>

<p>在<code>set</code>方法中，如果别人也按照相同的规则操作<code>count</code>，就不得不假设新的<code>count</code>随时可能被释放掉，所以此时应该持有它，即向它发送一个<code>retain</code>消息，以确保在使用它的过程中不会被释放掉。与此同时，应该给之前的<code>count</code>对象发送<code>release</code>消息以放弃对它的所有权(在 Objective-C 中时允许给<code>nil</code>发送消息的，所以即使<code>_count</code>还没被赋值，这里依然可以正常工作)。即使新旧两个值是同一个对象，也要在<code>[newCount retain]</code>之后给其发送<code>release</code>消息，毕竟你并不想无意中导致它被释放嘛。</p>

<p><code>
- (void)setCount:(NSNumber *)newCount {
    [newCount retain];
    [_count release];
    // Make the new assignment.
    _count = newCount;
}
</code></p>

<h3 id="section-1">使用存取器方法给属性赋值</h3>

<p>假设要实现一个方法来重置<code>count</code>的值，有若干方案。第一种实现是，使用<code>alloc</code>创建一个<code>NSNumber</code>实例，为平衡所有权随后<code>release</code>它。</p>

<p><code>
- (void)reset {
    NSNumber *zero = [[NSNumber alloc] initWithInteger:0];
    [self setCount:zero];
    [zero release];
}
</code></p>

<p>第二种实现方式，使用<strong>便利构造函数</strong>( convenience constructor )来创建<code>NSNumber</code>对象，因此此时也就不需要<code>retain</code>或者<code>release</code>操作：</p>

<p><code>
- (void)reset {
    NSNumber *zero = [NSNumber numberWithInteger:0];
    [self setCount:zero];
}
</code></p>

<p>注意，这两种方式都使用了<code>set</code>存取器。</p>

<p>接下来的实现方式在简单的场景下也可以正常工作，这里看似避开了存取器方法，但这样做有时几乎肯定会导致出错(比如，当忘记<code>retain</code>或<code>release</code>时，或者改变了该实例变量的内存管理语义(<code>semantics</code>))。</p>

<p><code>
- (void)reset {
    NSNumber *zero = [[NSNumber alloc] initWithInteger:0];
    [_count release];
    _count = zero;
}
</code></p>

<p><strong>注意</strong>，如果使用了 <strong>KVO</strong> (key-value observing，即键值观察)，使用上述方式改变这个变量是不会引起 KVO 响应的。</p>

<h3 id="initializer--dealloc-">不要在初始化( Initializer )方法和 dealloc 方法中使用存取器方法</h3>

<p>初始化( Initializer )方法和<code>dealloc</code>方法，是唯一不该使用存取器方法来给实例变量赋值的地方。使用<code>number</code>对象初始化一个初始值为0的<code>counter</code>对象，可以如下实现<code>init</code>方法：</p>

<p><code>
- (instancetype)init {
    self = [super init];
    if (self) {
        _count = [[NSNumber alloc] initWithInteger:0];
    }
    return self;
}
</code></p>

<p>如果想通过一个<code>count</code>参数来初始化<code>counter</code>，可以如下实现一个<code>initWithCount:</code>方法：</p>

<p><code>
- (instancetype)initWithCount:(NSNumber *)startingCount {
    self = [super init];
    if (self) {
        _count = [startingCount copy];
    }
    return self;
}
</code></p>

<p>由于<code>Counter</code>类有一个对象实例变量，所以它必须实现<code>dealloc</code>方法，在这个方法中给其所有实例变量发送一个<code>release</code>消息来放弃对它们的所有权，并在该方法最后调用父类即<code>super</code>的<code>dealloc</code>方法：</p>

<p><code>
- (void)dealloc {
    [_count release];
    [super dealloc];
}
</code></p>

<h2 id="section-2">使用弱引用来避免循环引用</h2>

<p><code>retain</code>一个对象就相当于创建了一个指向它的<strong>强引用</strong>(<code>strong reference</code>)。一个对象只有当它的所有强引用都被 release 后才会被释放掉(<code>deallocated</code>)。因此，这就有可能导致两个对象循环引用的问题，我们把这称为 <strong>retain cycle</strong>，即两个对象对彼此都有一个强引用(可能是两者间直接的强引用，也可能是通过一些其他的对象形成了一个首尾相接的强引用环)。</p>

<p><img class="right" src="/images/blog/20141111_retaincycles_2x.png" width="200" title="retaincycles" ></p>

<p>右图所示的对象关系就有可能导致循环引用。这里的<code>Document</code>对象含有一个<code>Page</code>对象来表示文档的每一页。每个<code>Page</code>对象都保留一个对其所在的文档的引用。如果<code>Document</code>对象有一个指向<code>Page</code>对象的强引用，同时<code>Page</code>对象也有一个指向<code>Document</code>对象的强引用，这样它们两个就永远都不会被释放掉了。直到<code>Page</code>对象被释放后，<code>Document</code>对象的引用计数才会变为0，而<code>Page</code>对象也同样要等<code>Document</code>对象释放后才会被释放。</p>

<p>解决这类循环引用问题的办法是使用弱引用(<code>weak reference</code>)。<strong>弱引用</strong>是指源对象不会持有它所引用的对象的一种无从属的关系。    </p>

<p>然而为了维持<code>object graph</code>的完整性，有些地方必须使用强引用(如果只使用弱引用，右图中的 page 和 paragraph 就没有了持有者，也因此会被释放掉)。源于此，Cocoa 约定，“父”对象应该使用强引用来持有它的“孩子们”(即属性)，而“孩子们”在引用“父”对象时应该使用弱引用。</p>

<p>因此，上图中的<code>document</code>对象有一个指向<code>page</code>对象的强引用(以持有它)，而<code>page</code>对象用一个弱引用来指向<code>document</code>对象(不持有它)。</p>

<p>比如在 Cocoa 中有以下几个地方就使用到了弱引用，tableView 的 data source(数据源)，outlineView 的 item，通知的观察者，以及各种<code>target</code>和<code>delegate</code>。</p>

<p>当给通过弱引用所持有的对象发送消息时要特别小心。给一个已被释放的对象发送消息，会导致应用 crash。必须清楚地知道一个对象何时是无效的。在多数情况下，被弱引用的对象要知道哪些对象弱引用了它，并且负责在它被释放时通知这些对象。
<font color="blue">
    比如，当在通知中心( notification center )注册一个对象时，通知中心持有的是这个对象的弱引用，并在相应的通知发出时给它发送消息。当这个对象被释放时，同时应该在通知中心把它注销掉，这样可以防止这之后通知中心再给这个已被释放的对象发送消息。同样的，当一个 delegate 对象被释放时，应该给相应的对象发送一个以 nil 为参数的 setDelegate: 消息，以移除它对该 delegate 的引用。上述这些消息通常在对象的 dealloc 方法中发送。
</font>
<br /><strong>译者注：</strong> 当一个对象被释放后，如果没有显式得给它置为<code>nil</code>，它就成了一个野指针，此时再给它发送消息，会导致一个报错为<code>EXC_BAD_ACCESS</code>的 crash。</p>

<h2 id="section-3">要避免对象在使用过程中被释放</h2>

<p>Cocoa 的所有权策略指出，获取来的对象通常应该确保在使用它的方法的整个作用域内都始终有效。同时也要确保可以放心得从当前作用域中返回该对象而不用担心它在某个时刻被释放掉。从<code>getter</code>方法返回的是一个缓存的实例变量还是一个计算得来的值并不重要，重要的是在任何时候用到这个对象时，它都应该是始终有效的。</p>

<p>对于上述规则有一些例外情况，大概可分为如下两类：</p>

<ol>
  <li>
    <p>当对象被从基本的集合类中移除时。</p>

    <pre><code> heisenObject = [array objectAtIndex:n];
 [array removeObjectAtIndex:n];
 // heisenObject could now be invalid.
</code></pre>

    <p>当一个对象从基本的集合类中被移除时，它会接收到一个<code>release</code>消息(而不是<code>autorelease</code>)。如果这个集合是该被移除对象的唯一持有者，该对象(此例中的<code>heisenObject</code>)将会立即被释放掉。</p>
  </li>
  <li>
    <p>当一个“父对象”被释放时。</p>

    <pre><code> id parent = &lt;#create a parent object#&gt;;
 // ...
 heisenObject = [parent child] ;
 [parent release]; // Or, for example: self.parent = nil;
 // heisenObject could now be invalid.
</code></pre>

    <p>有时通过其他对象获取到一个对象，然后直接或间接得 release 这个父对象。如果 release 后这个父对象被释放掉了，而这个父对象又是该子对象的唯一持有者，那么该子对象(此例中的<code>heisenObject</code>)将会同时被释放掉(假设这里的父对象在其<code>dealloc</code>方法中对其发送的是<code>release</code>而非<code>autorelease</code>消息)。</p>
  </li>
</ol>

<p>为了避免这些情况，应该在接收到上边的<code>heisenObject</code>后 retain 它，并负责在你不再使用它时将其 release。例如：</p>

<p><code>
heisenObject = [[array objectAtIndex:n] retain];
[array removeObjectAtIndex:n];
// Use heisenObject...
[heisenObject release];
</code></p>

<h2 id="dealloc-">不要在 dealloc 方法中管理稀缺资源</h2>

<p>通常不应该在<code>dealloc</code>方法中管理稀缺资源( scarce resources )，比如文件描述符( file descriptors )、网络连接和缓冲池( buffers )或缓存( caches )。特别注意，在设计类时不应该想当然得认为<code>dealloc</code>方法会在你认为的时刻被调用。有时由于某个 bug
或者应用被销毁掉( tear-down )，<code>dealloc</code>的调用可能会被延迟，或者干脆就不会被调用。</p>

<p>如果你的类有一个管理稀缺资源的属性，那么通常应该在你认为不再需要这些资源时，告知这个属性，先让它把这些资源“清理掉”，然后再 release 这个属性，这之后<code>dealloc</code>方法将会被调用。这样做的好处是，即使<code>dealloc</code>方法没被调用也不会引其他问题。</p>

<p>如果试图在<code>dealloc</code>方法顶部进行资源管理的操作，很容易引起问题。比如：</p>

<ol>
  <li>
    <p><code>object graph</code>被销毁时的顺序依赖关系</p>

    <p><code>object graph</code>的销毁机制是内在无序的，尽管我们通常期望也确实得到了一个特定的顺序，但这个是不可靠的。例如，如果一个对象被意外得通过 autorelease 而非 release 的方式释放掉了，其 <code>object graph</code> 的销毁顺序就会被改变，并可能导致一些未知的结果。</p>
  </li>
  <li>
    <p>稀缺资源未被回收</p>

    <p>会导致内存泄漏的 bug 必须修复，它们通常不会立刻使程序崩溃。然而，如果稀缺资源没有在希望释放的时候被释放掉，这可能会导致更严重的问题。比如，如果应用耗尽了文件描述符( file descriptor )，用户就不能保存数据了。</p>
  </li>
  <li>
    <p>资源清理的逻辑在错误的线程中执行</p>

    <p>如果对象在一个意外的时间点儿被 autorelease，无论此时它处于哪个线程的自动释放池中，都会被释放掉。这对于那些只能在某一个线程中被访问的资源，很可能是致命的。</p>
  </li>
</ol>

<h2 id="section-4">集合类持有它所包含对象的所有权</h2>

<p>当把一个对象添加到一个集合(比如<code>array</code>，<code>dictionary</code>，或<code>set</code>)中时，该集合将持有这个对象。当该对象从这个集合中移除，或者这个集合本身被释放时，这个集合释放该对象。因此，如果想创建一个 number 数组，有如下两种实现方式：</p>

<p><code>
NSMutableArray *array = &lt;#Get a mutable array#&gt;;
NSUInteger i;
// ...
for (i = 0; i &lt; 10; i++) {
    NSNumber *convenienceNumber = [NSNumber numberWithInteger:i];
    [array addObject:convenienceNumber];
}
</code></p>

<p>在这种情况下，由于没有调用 <code>alloc</code>，因此也就不需要调用<code>release</code>。这里不需要<code>retain</code>新创建的 number ( convenienceNumber )，因为数组将会替你做。</p>

<p><code>
NSMutableArray *array = &lt;#Get a mutable array#&gt;;
NSUInteger i;
// ...
for (i = 0; i &lt; 10; i++) {
    NSNumber *allocedNumber = [[NSNumber alloc] initWithInteger:i];
    [array addObject:allocedNumber];
    [allocedNumber release];
}
</code></p>

<p>在这种情况下，由于 number 是通过 <code>alloc</code> 创建的，所以需要在当前 <code>for</code> 循环的作用域内给其发送 <code>release</code> 消息(来平衡 alloc)。这里不需要<code>retain</code>新创建的 number ( convenienceNumber )，因为数组将会替你做。由于数组在通过<code>addObject:</code>添加 number 时 retain 了它，所以在该数组内它将不会被释放掉。</p>

<p>为了更好的理解上述问题，我们站在集合类实现者的角度来看。为了确保所有你所托管的对象都不会在你这里突然消失掉，就需要在它们传进来时给其发送一个<code>retain</code>消息。当他们被移除时，发送一个对应的<code>release</code>消息，并且当你被释放时，此时所持有的所有对象都应该在你自己的<code>dealloc</code>方法中接收到一个<code>release</code>消息。</p>

<h2 id="section-5">所有权策略通过引用计数实现</h2>

<p>所有权策略是基于引用计数(通常在<code>retain</code>方法之后称之为<code>retain count</code>)实现的。每个对象都有一个引用计数。</p>

<ul>
  <li>当创建一个对象时，其引用计数为<font color="red">1</font>.</li>
  <li>当给一个对象发送<code>retain</code>消息时，其引用计数<font color="red">加1</font>.</li>
  <li>当给一个对象发送<code>release</code>消息时，其引用计数<font color="red">减1</font>.
<br />当给一个对象发送<code>autorelease</code>消息时，其引用计数将会在该自动释放池结束时<font color="red">减1</font>.</li>
  <li>当一个对象的引用计数减为<font color="red">0</font>时，它将被释放掉。</li>
</ul>

<p><strong>重要：</strong> 不要试图让对象给出其当前精确的引用计数。这个结果通常是<font color="red">不准确</font>的，因为可能有你并不知道的 framework 的对象也 retain 了该对象。在调试内存管理问题时，只需要把注意力放在确保你的代码遵从上述所有权规则就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC内存管理那些事儿(1)：内存管理策略]]></title>
    <link href="http://matrixzk.github.io/blog/20141109/memory-management-1-policy/"/>
    <updated>2014-11-09T20:00:51+08:00</updated>
    <id>http://matrixzk.github.io/blog/20141109/memory-management-1-policy</id>
    <content type="html"><![CDATA[<p>在引用计数环境下用于内存管理的基本模型，是由 <strong>NSObject</strong> <code>protocol</code>中所定义的一些方法，结合一套标准的方法命名约定共同提供的。<strong>NSObject</strong> 类还定义了一个<code>dealloc</code>方法，该方法会在对象被释放时自动调用。本文将讲解在 Cocoa 编程中所需了解的关于正确进行内存管理的基本规则，并提供一些正确用法的示例。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#section">内存管理的基本规则</a>    <ul>
      <li><a href="#section-1">一个简单的例子</a></li>
      <li><a href="#autorelease--release-">使用 autorelease 延迟发送 release 消息</a></li>
      <li><a href="#reference">你不具有通过引用(<code>reference</code>)返回的对象的所有权</a></li>
    </ul>
  </li>
  <li><a href="#dealloc-">实现 dealloc 方法以释放所持有的对象</a></li>
  <li><a href="#core-foundation-">Core Foundation 使用类似的规则</a></li>
</ul>

<h2 id="section">内存管理的基本规则</h2>

<p>对象管理模型基于对象所有权。每个对象都有一或多个持有者(<code>owner</code>)。只要某对象还有一个持有者，它就不会被释放掉。如果一个对象没有了持有者，运行时系统(<code>runtime system</code>)就会自动将其销毁掉。为了确保让你清晰地意识到何时持有了一个对象，Cocoa 采用了如下策略：</p>

<ul>
  <li>
    <p><strong>只要是你创建的对象，你就拥有其所有权</strong>
<br />使用名字以<code>alloc</code>, <code>new</code>, <code>copy</code> 或者 <code>mutableCopy</code> 开头的方法所创建对象(比如,<code>alloc</code>, <code>newObject</code>, 或者<code>mutableCopy</code>)。</p>
  </li>
  <li>
    <p><strong>使用<code>retain</code>来获取对象的所有权</strong>
<br />一个获取到的对象通常要确保它在被接收的方法内是始终有效的，并且该方法也要确保安全得将该对象返回给它的调用者。使用<code>retain</code>有如下两个场景：
<br />(1) 在存取器(<code>accessor</code>)方法或<code>init</code>方法的实现中，拿到一个想要存储为属性值的对象的所有权；
<br />(2) 防止一个对象因其他操作的副作用而变成无效的(就像在<a href="/blog/20141111/memory-management-2-practical/#section-3"> 要避免对象在使用过程中被释放 </a>中所阐述的那样)。</p>
  </li>
  <li>
    <p><strong>当不再需要一个对象时，必须要放弃对它的所有权</strong>
<br />通过给一个对象发送<code>release</code>消息或者<code>autorelease</code>消息来放弃持有它。在 Cocoa 的惯用语中，放弃对一个对象的所有权通常被称为释放(release)一个对象。</p>
  </li>
  <li>
    <p><strong>如果不是某对象的持有者，不要执行放弃其所有权的操作</strong>
<br />这只是前边几条策略规则的一个推论，在这里明确阐述下。</p>
  </li>
</ul>

<h3 id="section-1">一个简单的例子</h3>

<p>为了举例说明上述策略，思考如下代码片段：</p>

<p><code>objective-c
{
    Person *aPerson = [[Person alloc] init];
    // ...
    NSString *name = aPerson.fullName;
    // ...
    [aPerson release];
}
</code></p>

<p>对象<code>Person</code>是由<code>alloc</code>方法创建的，所以随后在不再需要它时向它发送了<code>release</code>消息。这里的<code>name</code>不是通过附带所有权的方法(<code>the owning methods</code>)取到的，所以不必向其发送<code>release</code>消息。值得注意的是，本例中使用了<code>release</code>而不是<code>autorelease</code>。</p>

<h3 id="autorelease--release-">使用 autorelease 延迟发送 release 消息</h3>

<p>当需要延迟发送<code>release</code>消息时，使用<code>autorelease</code>，特别是在要从一个方法中返回一个对象时。比如，可以像这样实现上例中的<code>fullName</code>方法：</p>

<p><code>
- (NSString *)fullName {
    NSString *string = [[[NSString alloc] initWithFormat:@"%@ %@",
                                          self.firstName, self.lastName] autorelease];
    return string;
}
</code></p>

<p>你将持有这里返回的通过<code>alloc</code>创建的<code>string</code>。按照内存管理的规则，在你丢掉对<code>string</code>的引用之前，必须先放弃对它的所有权。然而，这里如果使用<code>release</code>，<code>string</code>将会在被返回前就被释放掉(该方法将返回一个无效的对象)。使用<code>autorelease</code>，表示你想要放弃其所有权，但允许该方法的调用者在这里返回的<code>string</code>被释放前使用它。</p>

<p><code>fullName</code>方法的实现也可以像这样：</p>

<p><code>
- (NSString *)fullName {
    NSString *string = [NSString stringWithFormat:@"%@ %@",
                                 self.firstName, self.lastName];
    return string;
}
</code></p>

<p>根据上述的基本规则，这里你会持有通过<code>stringWithFormat:</code>返回的<code>string</code>，所以可以放心得从该方法中返回<code>string</code>。</p>

<p>作为对比，如下实现是<font color="red">错误</font>的：</p>

<p><code>
- (NSString *)fullName {
    NSString *string = [[NSString alloc] initWithFormat:@"%@ %@",
                                         self.firstName, self.lastName];
    return string;
}
</code></p>

<p>依据上述命名约定，<code>fullName</code>方法的调用者并不认为自己持有了这里所返回的<code>string</code>，因此它也就没有理由释放所返回的<code>string</code>，于是，这里就导致了内存泄漏。</p>

<h3 id="reference">你不具有通过引用(<code>reference</code>)返回的对象的所有权</h3>

<p>Cocoa 中的某些方法会指定通过引用(<code>reference</code>)返回一个对象(也就是说，它们接受一个<code> ClassName **</code>或<code>id *</code>类型的参数)。一个常见的例子是，使用<code>NSError</code>对象来包含某个可能出现的 error 的相关信息。比如，<code>initWithContentsOfURL:options:error:</code> (NSData) 和 <code>initWithContentsOfFile:encoding:error:</code> (NSString)。</p>

<p>前边所述的规则同样适用于这种情况。当调用上述方法时，由于你并没有创建<code>NSError</code>对象，也就不具有其所有权，因此也就没义务释放它，就像这个例子：</p>

<p><code>
NSString *fileName = &lt;#Get a file name#&gt;;
NSError *error;
NSString *string = [[NSString alloc] initWithContentsOfFile:fileName
                        encoding:NSUTF8StringEncoding error:&amp;error];
if (string == nil) {
    // Deal with error...
}
// ...
[string release];
</code></p>

<h2 id="dealloc-">实现 dealloc 方法以释放所持有的对象</h2>

<p>在<code>NSObject</code>类中有一个<code>dealloc</code>方法，它将在一个对象没有任何持有者时被自动调用，该对象所占内存也将被回收 – 在 Cocoa 的惯用语中这被称为<code>freed</code>或者<code>deallocated</code>(释放)。<code>dealloc</code>方法所扮演的角色是，释放对象所占用的内存，处理它所占用的资源，包括对象的所有实例变量的所有权。</p>

<p>下面以<code>Person</code>类为例来说明下其<code>dealloc</code>方法的一种实现方式：</p>

<p>&#8220;`
@interface Person : NSObject
@property (retain) NSString *firstName;
@property (retain) NSString *lastName;
@property (assign, readonly) NSString *fullName;
@end</p>

<p>@implementation Person
// …
- (void)dealloc
    [_firstName release];
    [_lastName release];
    [super dealloc];
}
@end
&#8220;`</p>

<p><strong>重要：</strong>
<br />(1) 千万不要直接调用另一个类的<code>dealloc</code>方法；
<br />(2) 必须在所实现的<code>dealloc</code>方法的<font color="blue">末尾</font>调用<font color="red">父类</font>(<code>superclass</code>)的<code>dealloc</code>方法；
<br />(3) 不要把对系统资源的管理纳入对象的生命周期 (详情参考<a href="/blog/20141111/memory-management-2-practical/#dealloc-"> 不要在 dealloc 方法中管理稀缺资源 </a>)；
<br />(4) 当应用终止后，对象的<code>dealloc</code>方法可能并没有被调用。由于程序所占用的内存会在其终止时被自动清理掉，所以只需让操作系统去清理其所占用的资源就行，这会比挨个儿调用那些内存管理方法更高效。</p>

<h2 id="core-foundation-">Core Foundation 使用类似的规则</h2>

<p>Core Foundation 对象的内存管理规则与此类似 (详情参阅 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFMemoryMgmt/CFMemoryMgmt.html#//apple_ref/doc/uid/10000127i"> Memory Management Programming Guide for Core Foundation </a>)。然而，Cocoa 与 Core Foundation 的命名约定有所不同。需要注意，Core Foundation 的创建规则 (参考 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFMemoryMgmt/Concepts/Ownership.html#//apple_ref/doc/uid/20001148-103029"> The Create Rule </a>)并不适用于返回 Objective-C 对象的方法。例如，在如下所示的代码片段中，这里不用负责释放<code>myInstance</code>的内存：</p>

<p><code>
MyClass *myInstance = [MyClass createInstance];
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC内存管理那些事儿(0)：关于内存管理]]></title>
    <link href="http://matrixzk.github.io/blog/20141107/memory-management-0-introduction/"/>
    <updated>2014-11-07T20:08:51+08:00</updated>
    <id>http://matrixzk.github.io/blog/20141107/memory-management-0-introduction</id>
    <content type="html"><![CDATA[<p>不论哪门编程语言，内存管理都一直是一个广受关注的问题，包括有垃圾回收机制的 Java (前几天还听几个搞 Android 的小伙伴在热切的讨论 Java 中的内存管理)。作为有节操的 iOS 开发者，大家对内存管理问题更是时刻保持着高度的使命感。这两年新开的项目可能都已经使用 <code>ARC</code> ( Automatic Reference Counting )了。想想自己刚从 <code>MRR</code> ( manual retain-release ) 往 <code>ARC</code> 过渡那会儿，虽然苹果官方一再强调可以放心得使用 <code>ARC</code>，但由于在 <code>ARR</code> 下谨慎惯了，一时还是不太敢放心的把内存管理全都交给编译器去做。现在再看 <code>ARC</code>，确实是个可以放心托付的家伙，而且它在编译器级对内存管理做了更进一步的优化。其实当苹果在 Xcode 中内置了强大的静态分析器( Clang Static Analyzer )时我就想，既然内存泄漏隐患都能在编译阶段这么精准得定位到，为什么不更进一步直接把它们解决了呢。后来果然不久苹果就推出了强大的 <code>ARC</code> 机制，直接帮开发者把内存管理的事儿给做了，真是家强大的公司。虽然在 <code>ARC</code> 下不用太过多的关注内存管理问题，但是对 OC 的内存管理机制有一个深刻的理解还是非常有必要的，而且有时你也可能不得不去维护由于历史原因还在使用 <code>MRR</code> 的项目。<!-- more -->今天再看官方文档<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/memorymgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011-SW1"> Advanced Memory Management Programming Guide </a>时，依然感觉很精练，故决定将它翻译一下。</p>

<!--
另外还准备翻译以下两篇来组成一个关于OC内存管理的系列：

* [Transitioning to ARC Release Notes](https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html)
* [Memory Management Programming Guide for Core Foundation](https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFMemoryMgmt/CFMemoryMgmt.html#//apple_ref/doc/uid/10000127-SW1)
<!-->

<p>PS. 在苹果的助推下，开发者很快的从 MRR 过渡到了 ARC，包括一些固执的老程序员，这让人不禁猜测，swift 是不是也会在苹果官方的助推下，在一两年内实现从 OC 到 swift 的全面转换呢？让我们拭目以待。</p>

<ul id="markdown-toc">
  <li><a href="#section">概述</a></li>
  <li><a href="#section-1">防止内存泄漏的最佳实践</a></li>
  <li><a href="#section-2">使用分析工具调试内存问题</a></li>
</ul>

<h2 id="section">概述</h2>

<p>应用程序的内存管理是这样一个过程：在程序运行时分配内存，使用它，然后在不需要它时将其释放。一支优秀的程序通常会尽量少得使用内存。在 Objective-C 中，它也可被看做是在很多块数据和代码之间，为有限的内存资源分配使用权的一种方式。读完这个系列之后你将会了解到，要想控制好应用的内存使用，就需要精确得管理对象的生命周期，并在不再需要它们时将其释放掉。</p>

<p>虽然内存管理通常只针对单个对象，但是应该把管理<code>object graphs</code>作为目标。要确保已不再需要的对象所占的内存都被全部释放。</p>

<p><img class="center" src="/images/blog/20141107_memory_management_2x.png" width="600" title="memory_management" ></p>

<p>Objective-C 提供了两种管理内存的方式：</p>

<ol>
  <li>
    <p>第一种方式在本系列中被称为<code>manual retain-release</code>，或者称为 <strong>MRR</strong>，你需要监控所创建的对象来精确地管理内存。这是通过由 Foundation 的<code>NSObject</code>类结合运行时环境所提供的引用计数( reference counting )模型来实现的。</p>
  </li>
  <li>
    <p>第二种方式被称为自动引用计数，即 <strong>ARC</strong> ( Automatic Reference Counting )，使用和 MRR 一样的引用计数的方式，但不同的是该方式会在<strong>编译时期</strong>为你在适当的位置插入相应的内存管理方法调用。强烈建议在新的项目中开始使用 ARC。如果使用 ARC，可以说就不需要去理解即将介绍的有关 MRR 的知识了，但友情提示下，这些知识在某些情况下依然是需要的。更多关于 ARC 的内容，请参阅<a href="https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html"> Transitioning to ARC Release Notes </a>。</p>
  </li>
</ol>

<h2 id="section-1">防止内存泄漏的最佳实践</h2>

<p>不当的内存管理会导致两类问题：</p>

<ul>
  <li>
    <p>释放或覆盖了仍在使用的数据
<br />这会引起内存污染( memory corruption )，通常会导致应用 crash，或者更糟，覆盖掉用户数据。</p>
  </li>
  <li>
    <p>没有释放掉已不再使用的数据，导致内存泄漏( memory leak )
<br />内存泄漏是指被分配的内存已不再使用了，却没被释放掉。内存泄漏会使应用所占用的内存持续增加，从而导致糟糕的系统性能，或者应用直接被系统干掉。</p>
  </li>
</ul>

<p>站在引用计数的角度去考虑内存管理问题，常常事与愿违，因为这样往往更倾向于根据实现细节去考虑内存管理问题，而不是根据实际目标。应该站在对象持有者和<code>object graphs</code>的角度去考虑内存管理问题。</p>

<p>Cocoa 采用了一套明确的命名约定，来表明你当前是否拥有通过某方法所返回对象的所有权。详情参阅 <a href="/blog/20141109/memory-management-1-policy/">内存管理策略</a> ( 原文：<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/memorymgmt/Articles/mmRules.html#//apple_ref/doc/uid/20000994-BAJHFBGH"> Memory Management Policy </a>)。</p>

<p>虽然基本的策略很简单，但仍有一些实用的套路可使内存管理更加简单，而且能帮助确保在最大限度得减少程序资源需求的同时，程序依然能够可靠健壮得运行。详情参阅 <a href="/blog/20141111/memory-management-2-practical/">内存管理实践</a> ( 原文：<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/memorymgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW1"> Practical Memory Management </a>)。</p>

<p>自动释放池块( Autorelease Pool Blocks )提供了一个可以延迟给对象发送release消息的机制。它的使用场景是，当想要放弃某对象的所有权，但又想避免它被直接释放掉(比如在要从某方法返回一个对象时)。详情参阅 <a href="/blog/20141113/memory-management-3-autoreleasePool/">使用自动释放池块</a> ( 原文：<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/memorymgmt/Articles/mmAutoreleasePools.html#//apple_ref/doc/uid/20000047-CJBFBEDI"> Using Autorelease Pool Blocks </a>)。</p>

<h2 id="section-2">使用分析工具调试内存问题</h2>

<p>使用 Xcode 内置的 Clang Static Analyzer (静态分析器)，可以在编译时期找出代码所存在的内存问题。</p>

<p>如果内存问题仍然出现，还有一些其他的工具和技巧能确定和诊断问题所在。</p>

<ul>
  <li>
    <p>在 <strong>Technical Note TN2239</strong> 和<a href="https://developer.apple.com/library/ios/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638"> iOS Debugging Magic </a>中介绍了很多与这些工具和技巧相关的内容，特别是<code>NSZombie</code>的使用，都能很好得帮忙定位到过度释放( over-released )的对象。</p>
  </li>
  <li>
    <p>使用 <strong>Instruments</strong> 来追踪引用计数事件，查找内存泄漏。详情参阅<a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004652"> Instruments User Guide </a>中的<a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/GatheringDatafortheFirstTime/GatheringDatafortheFirstTime.html#//apple_ref/doc/uid/TP40004652-CH5"> Collecting Data on Your App </a>章节。</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
